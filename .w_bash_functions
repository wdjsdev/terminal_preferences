addAlias()
{
	echo alias $1=\"$2\" >> ~/.w_bash_aliases
	echo "" >> ~/.bashrc
}

clr()
{
	clear
	echo "there.. it's friggin clear. here's where you are.. where do you wanna go next?"
	pwd
}

subl()
{
	for file in "$@"
	do
		open -a "Sublime Text" "$file" &&
		echo "Opened File: $file in Sublime Text."
	done
	# open -a "Sublime Text" "$1" &&
	# echo "Opened File: $1 in Sublime Text."
}

op()
{
	if [[ $1 ]];then
		open `ls | head -$1`
	else
		file=$(ls | sort -n | head -1)
		open $file
	fi
}

opr()
{

	seq1=$1
	seq2=$2

	pause()
	{
		read -n1 -s
	}

	openTheFiles()
	{
		for x in `seq $seq1 $seq2`;
		do
			seqNum=$(printf %03d $x)
			open *$seqNum*
			pause	
		done
	}

	if [[ $1 && $2 ]]
	then
		openTheFiles
	else
		echo You must include a range
		echo Example:
		echo opr 000 005
	fi
}

openEach()
{
	files=${PWD}/*
	for f in $files
	do
		name=$(basename $f)
		echo "Press enter to open $name"
		read -n1 -s
		open $f
		echo "opened file: $name"
		echo
	done
}

gmlpw()
{
  loc=~/Desktop/.pw/.gml/gmlpw.txt
  echo $loc
  echo $(cat $loc)
}


chex()
{
  if [[ $1 && $2 ]]; then
    for file in *.$1
      do
	mv "$file" "${file%.$1}.$2"
      done
  else
    echo "You must give 2 arguments."
    echo "chex oldExt newExt"
    echo "chex ait ai"
  fi
}

ait()
{
	rename "s/.ai/.ait/" *
}

ai()
{
	rename "s/.ait/.ai/" *
}
   

settemp(){
  unlink ~/temp
  ln -s "${PWD}" ~/temp
}

readTemp(){
	readlink ~/temp
}

newTemp()
{
	if [[ $1 ]]; then
		style=$1
		open ~/makeTemplate/blank/
		open ~/makeTemplate/pp/*$1*
		open ~/makeTemplate/mu/*$1*
	else
		echo "You must give a style number as an argument."
		echo "makeTemplate [style number]"
		echo "makeTemplate 005"
	fi
}

setbl()
{
	unlink ~/makeTemplate/blank
	ln -s "${PWD}/"$1 ~/makeTemplate/blank
}

setmu()
{
	unlink ~/makeTemplate/mu
	ln -s "${PWD}/" ~/makeTemplate/mu
}

setpp()
{
	unlink ~/makeTemplate/pp
	ln -s "${PWD}/" ~/makeTemplate/pp
}

archive()
{
	if [[ $1 ]]; then
		mkdir $ctArchive/$1
		mv * $ctArchive/$1/
	fi
}

# searchDir()
# {
# 	if [[ $1 ]];then
# 		egrep -lir "($1)" .
# 	else
# 		echo "Please enter a regex argument."
# 	fi
# }

searchDir()
{
	if [[ $2 ]];then
		maxDepth=$2
	else
		maxDepth=1
	fi

	valid=false

	if [[ $1 ]];then
		result=`find . -type d -maxdepth $maxDepth -name "*$1*" -print -quit` &&
		# result=`ls | grep $1` &&
		echo "result = $result"
		valid=true
	else
		echo "Please enter a search term"
		echo
		echo
	fi

	if [[ $valid ]];then
		read -p "(O)pen, (C)opy, or Cancel(X)?:  " usrInput

		if [[ $usrInput == "O" ]] || [[ $usrInput == "o" ]];then
			echo "opening $result" &&
			cd "$result" &&
			ls
			
		elif [[ $usrInput == "c" ]] || [[ $usrInput == "c" ]];then
			echo "copying $result to imported_job_folders" 
			cp -r "$result" "$auto/imported_job_folders"
		fi

	fi
}

targetCodes()
{
	echo 'var artworkTargets = 
	{
		"Front Upper Right": "TFUR",
		"Front Upper Left": "TFUL",
		"Front Center": "TFCC",
		"Front Lower Right": "TFLR",
		"Front Lower Center": "TFLC",
		"Front Lower Left": "TFRL",
		"Back Locker Tag": "TBLT",
		"Back Player Name": "TBPL",
		"Back Player Number": "TBNM",
		"Back Large": "TBLB",
		"Right Shoulder": "TRSH",
		"Right Sleeve": "TRSL",
		"Left Shoulder": "TLSH",
		"Left Sleeve": "TLSL",
		"Right Hood": "TRHD",
		"Left Hood": "TLHD",
		"Back Center": "TBCB",
		"Back Ghosted Mascot": "TBGG",
		"Back Lower Back": "TBLC",
		"Front Right Leg": "BFRL",
		"Front Left Leg": "BFLL",
		"Back Right Leg": "BBRL",
		"Back Left Leg": "BBLL",
		"Right Side Leg": "BRSD",
		"Right Lower Leg": "BRLW",
		"Left Side Leg": "BLSD",
		"Left Lower Leg": "BLLW",
		"Back Waistband": "BBWB",
		"Left Waistband": "BFUL",
		"Right Waistband": "BFUR",
		"Right Hip": "BFRH",
		"Left Hip": "BFLH"
	}'
}

importJob()
{
	if [[ $1 ]];then
		cp -r "$1" $auto/imported_job_folders/
	else
		echo "please include the directory as an argument."
	fi
}

mk()
{
	if [[ $1 ]];then
		mkdir -p -- "$1" &&
		cd -P -- "$1"
	else
		echo "Please enter a name for the directory."
	fi
}

mkct()
{
	mkdir -p -- "_Converted_Templates" && 
	cd -P -- _Converted_Templates &&
	pwd
}

ct()
{
	if [[ $1 ]];then
		cd $1 &&
		cd *onvert* &&
		ls
	fi
}

importTemp()
{
	cp ~/temp/*.ait . &&
	rm *lank* && 
	ls
}

#get json data
getJson()
{
	if [[ $1 ]]; then

		#json folder
		dest=/Volumes/Customization/Library/Scripts/Script\ Resources/Data/json_design_files/

		url="https://forms.na2.netsuite.com/app/site/hosting/scriptlet.nl?script=908&deploy=1&compid=460511&h=940572c6865fbbe12e98&designId=$1"

		touch "$dest/$1.json"

		curl $url > "$dest/$1.json" &&
		subl "$dest/$1.json"

	else
		echo "You must enter a design number."
	fi
}


#rename files in current directory
rn()
{
	if [[ $1 && $2 ]]; then
		rename s/$1/$2/g *
	else
		echo "You must enter two arguments."
		echo "The first argument is the pattern to change."
		echo "The second argument is the new pattern."
	fi
}


#get the path of the current document and save it to the clipboard
#including variable declaration syntax
getPath()
{
	echo "var path = \"${PWD}\";" | pbcopy
}


vars()
{
	less ~/.w_bash_variables
}


updateExp()
{
	node $printDate > $exp
	cat $exp
}

#open documentation PDFs
openRes()
{
	srcFolder=$auto/resources/
	open $srcFolder/*ui* &&
	open $srcFolder/*ai*
}

#
#	Git functions
#

status()
{
	git status
}

gitInit()
{
	dirName=${PWD##*/}
	git init
	git add -A
	git commit -m "Initial Commit"

	git remote add origin https://github.com/wdjsdev/$dirName.git
}

#git add and commit
commit()
{
	if [[ $1 ]]; then
		git add -A
		git commit -m "$1"

	else
		echo "Please enter a commit message."
	fi
}

gitPush()
{
	git push -u origin master
}

getRepos()
{
	printScript=~/Desktop/automation/git_utilities/get_repos.js
	gitRepos=`curl -s https://api.github.com/users/wdjsdev/repos`
	echo "function getNames()" > $printScript
	echo "{" >> $printScript
	echo "	var data = $gitRepos;" >> $printScript
	echo "	var len = data.length;" >> $printScript
	echo "	for(var x=0;x<len;x++)" >> $printScript
	echo "	{" >> $printScript
	# echo "		console.log(data[x].html_url);" >> $printScript
	echo "		console.log(data[x].name);" >> $printScript
	echo "	}" >> $printScript
	echo "}" >> $printScript
	echo "getNames();" >> $printScript
	# node ~/Desktop/automation/get_repos.js
	node $printScript
}

# clone()
# {
# 	if [[ $1 ]];then
# 		git clone https://github.com/wdjsdev/$1 &&
# 		cd $1
# 		git checkout -b dev origin/dev
# 	else
# 		echo "You must enter the name of the git repo you want to clone."
# 	fi
# }

clone()
{
	repoPath="https://github.com/wdjsdev/"
	if [[ $1 && $2 ]];then
		git clone -b $2 $repoPath$1 &&
		cd $1
	elif [[ $1 ]];then
		git clone $repoPath$1 &&
		cd $1
	else
		echo "You must enter the name of the git repo you want to clone."
	fi
}

binaryConversionDev()
{
	filesToConvert=~/automatic_binary_conversion/convert_to_binary

	rm $filesToConvert/*
	cp *.js* $filesToConvert

	node $HOME/.vscode/extensions/adobe.extendscript-debug-1.1.2/public-scripts/exportToJSX.js -n "$filesToConvert/"

	ls $filesToConvert

}

# testing new version below

# projectToBinary()
# {	
# 	#jsx to jsxbin compiler script
# 	# compiler="~/automatic_binary_conversion/jsxbin_compiler.jsx"

# 	projectFolder=${PWD} &&
# 	mainScript=$projectFolder/*Dev.js* &&
# 	components=$projectFolder/components &&

# 	#make sure that there's a bin_comp folder in 
# 	#the project folder
# 	if [ ! -d "bin_comp" ]; then
# 		mkdir $projectFolder/bin_comp
# 		echo "made a bin_comp folder"
# 	fi
# 	binComp=$projectFolder/bin_comp

# 	#make sure there's a convert_to_binary folder
# 	if [ ! -d ~/automatic_binary_conversion/convert_to_binary ]; then
# 		mkdir ~/automatic_binary_conversion/convert_to_binary
# 		echo "made a convert_to_binary folder"
# 	fi

# 	filesToConvert=~/automatic_binary_conversion/convert_to_binary
	

# 	# #make sure there's a binary_converted folder
# 	# if [ ! -d ~/automatic_binary_conversion/binary_converted ]; then
# 	# 	mkdir ~/automatic_binary_conversion/binary_converted
# 	# 	echo "made a binary_converted folder"
# 	# fi
# 	# convertedFiles=~/automatic_binary_conversion/binary_converted

# 	rm -rf $filesToConvert/* >/dev/null 2>&1

# 	cp -v $mainScript $filesToConvert &&
# 	echo 
# 	echo $mainScript
# 	echo

# 	cp -v $components/*.js $filesToConvert &&
# 	echo "copied components"

# 	echo "files in filesToConvert:"
# 	ls $filesToConvert
# 	echo
# 	echo
# 	echo

# 	# osascript -e 'quit app "ExtendScript Toolkit"'
# 	# osascript -e 'quit app "Visual Sudio Code"'

# 	# estk version..
# 	# /Volumes/Macintosh\ HD/Applications/Adobe\ ExtendScript\ Toolkit\ CC/ExtendScript\ Toolkit.app/Contents/MacOs/ExtendScript\ Toolkit -cmd $compiler >/dev/null 2>&1 &&

# 	# VS Code version
# 	node $HOME/.vscode/extensions/adobe.extendscript-debug-1.1.2/public-scripts/exportToJSX.js -n $filesToConvert

# 	rm -rf $filesToConvert/*.js

# 	ls $filesToConvert

# 	# remove spaces and add eval function
# 	evalString="eval(\""
# 	closeString="\")"
# 	for file in $filesToConvert/*;do
# 		contents=`cat $file | tr -d " \t\n\r"`
# 		echo $evalString$contents$closeString > $file
# 	done

# 	cp -v $filesToConvert/*.jsx $projectFolder
# 	echo
# 	echo "Copied main scripts"
# 	echo
	
# 	cp -v $filesToConvert/*.jsxbin $binComp
# 	echo
# 	echo "Copied components"
# 	echo

# 	# mv $convertedFiles/*.jsx $projectFolder &&
# 	# echo "Moved $(basename $projectFolder/*.jsx) binary file to project folder."

# 	# mv $convertedFiles/*.jsxbin $binComp &&
# 	# echo "Moved binary components to bin_comp"

# 	# rm $filesToConvert/* &&
# 	# echo "Successfully created binary files."
# }





# testing dev version
projectToBinary()
{
	projectFolder=${PWD} &&
	mainScript=$projectFolder/*Dev.js* &&
	components=$projectFolder/components &&

	#make sure that there's a bin_comp folder in 
	#the project folder
	if [ ! -d "bin_comp" ]; then
		mkdir $projectFolder/bin_comp
		echo "made a bin_comp folder"
	fi
	binComp=$projectFolder/bin_comp

	#make sure there's a convert_to_binary folder
	if [ ! -d ~/automatic_binary_conversion/convert_to_binary ]; then
		mkdir ~/automatic_binary_conversion/convert_to_binary
		echo "made a convert_to_binary folder"
	fi
	filesToConvert=~/automatic_binary_conversion/convert_to_binary




	# copy the main script(s)
	cp $projectFolder/*Dev* $filesToConvert


	# strip the dev label from the files
	rename s/_Dev// $filesToConvert/*


	# convert main scripts to bin
	vsCodeToBinary $filesToConvert

	# reformat main scripts
	for file in $filesToConvert/*;do
		reformatBinFile $file
	done

	# remove leftover jsx files
	rm -rf $filesToConvert/*.jsx

	# fix the extensions
	rename s/jsxbin/jsx/ $filesToConvert/*

	# copy the main script(s) back to project folder
	cp $filesToConvert/* $projectFolder

	# clear out the filesToConvert folder
	rm -rf $filesToConvert/*


	# copy components
	cp $components/*.js* $filesToConvert
	
	# convert components to bin
	vsCodeToBinary $filesToConvert

	# remove leftover js files
	rm -rf $filesToConvert/*.js

	# reformat components
	for file in $filesToConvert/*;do
		reformatBinFile $file
	done


	# copy components to bin_comp
	cp $filesToConvert/* $binComp

	# clear out the filesToConvert folder
	rm -rf $filesToConvert/*

}

reformatComponents()
{
	for file in $filesToConvert/*;do
		reformatBinFile $file
	done
}

reformatBinFile()
{
	if [[ -z "$1" ]];then
		echo "please call out a file for conversion"
		return
	fi
	# remove spaces and add eval function
	evalString="eval(\""
	closeString="\")"

	file=$1
	contents=`cat $file | tr -d " \t\n\r"`
	echo $evalString$contents$closeString > $file

	echo "reformatted $1"
	
}

vsCodeToBinary()
{
	node $HOME/.vscode/extensions/adobe.extendscript-debug-1.1.2/public-scripts/exportToJSX.js -n $1
}

testFunction()
{
	echo $1
	echo $2

	if [[ ! $1 ]];then
		echo "please call out a file for conversion"
		return
	fi

	if [[ ! $2 ]];then
		echo "please call out an output extension"
		return
	fi
}

fileToBinary()
{
	if [[ ! $1 ]];then
		echo "please call out a file for conversion"
		return
	fi

	if [[ ! $2 ]];then
		echo "please call out an output extension"
		return
	fi

	filesToConvert=~/automatic_binary_conversion/convert_to_binary

	script=$1

	scriptName="$(basename $script)"
	# sourceDir="$(dirname $script)"
	
	if [[ $3 ]];then
		sourceDir=$3
	else
		sourceDir=.
	fi
	ext="${script#*.}"

	# empty the conversion folder
	rm -rf $filesToConvert/*

	# copy the script to the conversion folder
	cp $script $filesToConvert


	script=$filesToConvert/$scriptName

	node $HOME/.vscode/extensions/adobe.extendscript-debug-1.1.2/public-scripts/exportToJSX.js -n $script

	rm $script

	script=$filesToConvert/*

	# reformat main scripts
	reformatBinFile $script

	rename s/".jsxbin"/$2/ $filesToConvert/*

	mv -i $filesToConvert/* $sourceDir

}


#function for converting a single file to binary instead
#of a whole project (like the evalBin function)
# fileToBinary()
# {	

# 	if [[ -z "$1" ]];then
# 		echo "please call out a file for conversion"
# 		return
# 	fi

# 	#jsx to jsxbin compiler script
# 	compiler=~/automatic_binary_conversion/jsxbin_compiler.jsx

# 	projectFolder=${PWD} &&
# 	mainScript=$projectFolder/$1 &&

# 	#make sure there's a convert_to_binary folder
# 	if [ ! -d ~/automatic_binary_conversion/convert_to_binary ]; then
# 		mkdir ~/automatic_binary_conversion/convert_to_binary
# 		echo "made a convert_to_binary folder"
# 	fi
# 	convertedFiles=~/automatic_binary_conversion/binary_converted &&

# 	#make sure there's a binary_converted folder
# 	if [ ! -d ~/automatic_binary_conversion/binary_converted ]; then
# 		mkdir ~/automatic_binary_conversion/binary_converted
# 		echo "made a binary_converted folder"
# 	fi
# 	filesToConvert=~/automatic_binary_conversion/convert_to_binary

# 	cp $mainScript $filesToConvert &&
# 	echo "copied $mainScript"

# 	echo "the following files have been copied to filesToConvert"
# 	ls $filesToConvert

# 	osascript -e 'quit app "ExtendScript Toolkit"'

# 	#it's not an error if i don't get a message about it.
# 	/Volumes/Macintosh\ HD/Applications/Adobe\ ExtendScript\ Toolkit\ CC/ExtendScript\ Toolkit.app/Contents/MacOs/ExtendScript\ Toolkit -cmd $compiler >/dev/null 2>&1 &&
	
# 	#noisy version..
# 	# /Volumes/Macintosh\ HD/Applications/Adobe\ ExtendScript\ Toolkit\ CC/ExtendScript\ Toolkit.app/Contents/MacOs/ExtendScript\ Toolkit -cmd $compiler &&

# 	mv $convertedFiles/*.jsx* $projectFolder &&

# 	rm $filesToConvert/* &&
# 	echo "Successfully created binary files."
# }


bin()
{
	if [[ $2 ]];then
		if [[ $3 ]];then
			fileToBinary $1 $2 $3
		else
			fileToBinary $1 $2
		fi
	elif [[ $1 ]];then
		fileToBinary $1
	else
		projectToBinary
	fi
}




importBin()
{
	# binConverted="/Volumes/Macintosh\ HD/Users/will.dowling/Desktop/binary_converted"
	binConverted="/Users/will.dowling/Desktop/binary_converted"
	home=${PWD}
	mv $binConverted/*.jsx $home
	mv $binConverted/*.jsxbin $home/bin_comp
}



uvFile()
{
	open $uvb
}

targets()
{
	open $auto/mockup_exporter/uv_maps/targets/generic_targets.ai
}


viewLogs()
{
	subl "$nlogs"
}


#
#	overwrite data functions
#

owDrLib()
{
	dest="/Volumes/CustomizationDR/Library/Scripts/Script_Resources/Data"
	cp $ndata/central_library.js "$dest"
	cp $ndata/build_template_library.js "$dest"
	cp $ndata/aa_special_instructions.js "$dest"
}


#
#	overwrite scripts functions
#

owUtil()
{
	util="$auto/utilities/Utilities_Container.jsxbin"
	batch="$auto/utilities/Batch_Framework.jsxbin"
	cp $util $ndata && 
	echo "Successfully overwrote the utilities container." &&
	cp $batch $ndata &&
	echo "Successfully overwrote the batch framework."
}


##Overwrite Setup Scripts

owAddArt()
{
	addArt="$auto/add_artwork/Add_Artwork.jsx"
	comp="$auto/add_artwork/bin_comp"
	cp $addArt $nss && echo "Successfully overwrote Add_Artwork.jsx on network." &&
	rm $naacomp/*.js* &&
	rm $drComp/add_artwork/*.js* &&
	cp $comp/*.js* $naacomp && echo "Successfully overwrote Add Artwork components on network."
	cp $comp/*.js* $drComp/add_artwork && echo "Successfully overwrote Add Artwork components on DR network."
}

owBreakSymbolLinks()
{
	dir="$auto/break_all_symbol_links"
	script="$dir/Break_All_Symbol_Links.jsx"
	cp $script $nss &&
	echo "Sucessfully overwrote Break Symbol Links script."
}

owDeleteDefaultSwatches()
{
	script="$auto/default_swatch_delete/Delete_Default_Swatches.jsx"
	cp $script $nss &&
	echo "Successfully overwrote Delete_Default_Swatches.jsx"
}

owCreateArtboards()
{
	script="$auto/create_artboards/Create_Artboards.jsx"
	cp $script $nss &&
	echo "Successfully overwrote Create_Artboards.jsx"
}

owBuildProd()
{
	bp="$auto/build_prod_file"
	bpc="$bp/bin_comp"
	cp -v $bp/Build_Prod_File.jsx $nss &&
	cp -v $bp/Adjust_Prod_File.jsx $nss &&	
	cp -v $bpc/*.js* $ncomp/build_prod_file &&
	echo "Successfully overwrote US Scripts" &&
	cp -v $bpc/*.js* $drComp/build_prod_file &&
	echo "Successfully overwrote DR scripts."
}

owColorBlocks()
{
	cb="$auto/color_blocks/Color_Blocks.jsx"
	cp $cb $nss &&
	echo "Successfully overwrote Color_Blocks script."
}

owCheckThrucut()
{
	dir="$auto/check_thrucut"
	script="$dir/Check_Thru_Cut.jsx"
	cp $script $nss &&
	echo "Sucessfully overwrote Check_Thru_Cut.jsx"
}

owSaveExport()
{
	dir="$auto/save_export"
	script="$dir/Save_Export.jsx"
	cp $script $nss &&
	echo "Sucessfully overwrote Save_Export.jsx"
}



##Overwrite Mockup Scripts

owBuildMock()
{
	bm="$auto/build_mockup"
	bmc="$bm/bin_comp"
	cp -v $bm/Build_Mockup.jsx $nms &&
	cp -v $bmc/*.js* $nbmcomp &&
	echo "Successfully overwrote build_mockup scripts."
}

owBuildMockBeta()
{
	bm="$auto/build_mockup"
	script="$bm/Build_Mockup_Beta.jsx"
	bmc="$bm/bin_comp"
	cp $script $nms &&
	echo "copied script"
	cp $bmc/*.js* $nbmBetaComp &&
	echo "copied components"
	echo "Successfully overwrote build_mockup_beta scripts."
}

owMockupExporter()
{
	dir="$auto/mockup_exporter"

	script="$dir/Mockup_Exporter.jsx"
	cp -v $script $nme &&
	script="$dir/3D_Builder_Blank_SVG_Exporter.jsx"
	cp -v $script $nme &&
	script="$dir/Setup_UV_Map_Template.jsx"
	cp -v $script $nme &&

	cp -v $dir/bin_comp/*.js* $nmecomp &&
	echo "Successfully overwrote Mockup_Exporter scripts."
}

owInfo()
{
	script="$auto/mockup_info/Mockup_Info.jsx"
	cp $script $nms &&
	echo "Successfully overwrote Mockup_Info.jsx"
}

owMerge()
{
	mt="$auto/merge_templates"
	mtc="$mt/bin_comp"
	rm $nmtcomp/*.js* &&
	cp $mtc/*.js* $nmtcomp &&
	cp "$mt/Merge_Templates.jsx" $nms &&
	echo "Successfully overwrote merge_templates scripts."
}

owSmash()
{
	cs="$auto/color_smasher/Color_Smasher.jsx"
	cp $cs $nms &&
	echo "Successfully overwrote Color_Smasher script."
}



##Overwrite Development Scripts

owBuildTemp()
{
	bt="$auto/build_template"
	btComp="$bt/bin_comp"
	nbtComp="$ncomp/build_template"
	rm $nbtComp/*.js*

	cp $bt/*.jsx $ntb &&
	cp $btComp/*.jsxbin $nbtComp &&
	rm $ntb/*Dev.jsx &&
	echo "Successfully overwrote build_template scripts."
}

ow3dBuilderSvgExporter()
{
	dir="$auto/mockup_exporter"
	blankScript="$dir/3d_Builder_Blank_SVG_Exporter.jsx"
	cp $blankScript $nme &&
	updateMockupExporterComponents &&
	echo "Successfully overwrote Blank_SVG_Exporter scripts."
}

owChangeCode()
{
	script="$auto/change_code/Change_Code.jsx"
	cp $script $nds &&
	echo "Successfully overwrote Change_Code.jsx on the network."
}

owUpdatePlacement()
{
	script="$auto/update_placement_data/Update_Placement.jsx"
	cp $script $nds &&
	echo "Successfully overwrote Update_Placement.jsx on the network."
}

owRebuild()
{
	rt="$auto/rebuild_template/Rebuild_Template.jsx"
	cp $rt $nds &&
	echo "Successfully overwrote Rebuild_Template script."
}

owPrepressGuides()
{
	script="$auto/development_scripts/add_placement_guides/prepress_guides/Add_Prepress_Guides.jsx"
	devComp="$auto/development_scripts/add_placement_guides/prepress_guides/bin_comp"
	netComp="$ncomp/prepress_guides"
	rm $netComp/*.js*
	cp $script $nDevScripts &&
	echo "Successfully overwrote Add_Prepress_Guides script."
	cp $devComp/*.js* $netComp &&
	echo "Successfully overwrote Add_Prepress_Guides components."
}



##Deprecated
owRushOrders()
{
	script="$auto/rush_orders/Rush_Orders.jsx"
	devComp="$auto/rush_orders/bin_comp"
	netComp="$ncomp/rush_orders"

	cp $script $nss &&
	cp $script $nms &&
	echo "Copied Rush_Orders.jsx to network."
	rm $netComp/*.js*
	cp $devComp/*.jsxbin $netComp &&
	echo "Successfully overwrote components."

}